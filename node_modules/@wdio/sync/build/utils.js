"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeErrorMessage = exports.stackTraceFilter = void 0;
const constants_1 = require("./constants");
/**
 * filter stack array
 * @param {string} stackRow
 * @returns {boolean}
 */
exports.stackTraceFilter = (stackRow) => {
    if (stackRow.match(constants_1.STACK_START)) {
        return !constants_1.STACKTRACE_FILTER.some(r => stackRow.includes(r));
    }
    return true;
};
/**
 * Cleanup stack traces, merge and remove duplicates
 * @param {Error|*} commandError    Error object or anything else including undefined
 * @param {Error}   savedError      Error with root stack trace
 * @returns {Error}
 */
function sanitizeErrorMessage(commandError, savedError) {
    var _a;
    let name, stack, message;
    if (commandError instanceof Error) {
        ({ name, message, stack } = commandError);
    }
    else {
        name = 'Error';
        message = commandError;
    }
    const err = new Error(message);
    err.name = name;
    let stackArr = ((_a = savedError.stack) === null || _a === void 0 ? void 0 : _a.split('\n')) || [];
    /**
     * merge stack traces if `commandError` has stack trace
     */
    if (stack) {
        // remove duplicated error name from stack trace
        stack = stack.replace(`${err.name}: ${err.name}`, err.name);
        // remove first stack trace line from second stack trace
        stackArr[0] = '\n';
        // merge
        stackArr = [...stack.split('\n'), ...stackArr];
    }
    err.stack = stackArr
        // filter stack trace
        .filter(exports.stackTraceFilter)
        // remove duplicates from stack traces
        .reduce((acc, currentValue) => {
        return acc.includes(currentValue) ? acc : `${acc}\n${currentValue}`;
    }, '')
        .trim();
    return err;
}
exports.sanitizeErrorMessage = sanitizeErrorMessage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQTREO0FBRTVEOzs7O0dBSUc7QUFDVSxRQUFBLGdCQUFnQixHQUFHLENBQUMsUUFBZ0IsRUFBRSxFQUFFO0lBQ2pELElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyx1QkFBVyxDQUFDLEVBQUU7UUFDN0IsT0FBTyxDQUFDLDZCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUM1RDtJQUNELE9BQU8sSUFBSSxDQUFBO0FBQ2YsQ0FBQyxDQUFBO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixvQkFBb0IsQ0FBRSxZQUFtQixFQUFFLFVBQWlCOztJQUN4RSxJQUFJLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFBO0lBQ3hCLElBQUksWUFBWSxZQUFZLEtBQUssRUFBRTtRQUMvQixDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxZQUFZLENBQUMsQ0FBQTtLQUM1QztTQUFNO1FBQ0gsSUFBSSxHQUFHLE9BQU8sQ0FBQTtRQUNkLE9BQU8sR0FBRyxZQUFZLENBQUE7S0FDekI7SUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM5QixHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUVmLElBQUksUUFBUSxHQUFHLE9BQUEsVUFBVSxDQUFDLEtBQUssMENBQUUsS0FBSyxDQUFDLElBQUksTUFBSyxFQUFFLENBQUE7SUFFbEQ7O09BRUc7SUFDSCxJQUFJLEtBQUssRUFBRTtRQUNQLGdEQUFnRDtRQUNoRCxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzRCx3REFBd0Q7UUFDeEQsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQTtRQUNsQixRQUFRO1FBQ1IsUUFBUSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUE7S0FDakQ7SUFFRCxHQUFHLENBQUMsS0FBSyxHQUFHLFFBQVE7UUFDaEIscUJBQXFCO1NBQ3BCLE1BQU0sQ0FBQyx3QkFBZ0IsQ0FBQztRQUN6QixzQ0FBc0M7U0FDckMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxFQUFFO1FBQzFCLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxZQUFZLEVBQUUsQ0FBQTtJQUN2RSxDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ0wsSUFBSSxFQUFFLENBQUE7SUFFWCxPQUFPLEdBQUcsQ0FBQTtBQUNkLENBQUM7QUFwQ0Qsb0RBb0NDIn0=