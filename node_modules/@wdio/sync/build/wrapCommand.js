"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("@wdio/logger"));
const executeHooksWithArgs_1 = __importDefault(require("./executeHooksWithArgs"));
const utils_1 = require("./utils");
const fibers_1 = require("./fibers");
const log = logger_1.default('@wdio/sync');
let inCommandHook = false;
const timers = [];
const elements = new Set();
/**
 * resets `_NOT_FIBER` if Timer has timed out
 */
process.on('WDIO_TIMER', (payload) => {
    if (payload.start) {
        return timers.push(payload.id);
    }
    if (timers.includes(payload.id)) {
        while (timers.pop() !== payload.id)
            ;
    }
    if (payload.timeout) {
        elements.forEach(/* istanbul ignore next */ /* istanbul ignore next */ element => { delete element._NOT_FIBER; });
    }
    if (timers.length === 0) {
        elements.clear();
    }
});
/**
 * wraps a function into a Fiber ready context to enable sync execution and hooks
 * @param  {Function}   fn             function to be executed
 * @param  {String}     commandName    name of that function
 * @param  {Function[]} beforeCommand  method to be executed before calling the actual function
 * @param  {Function[]} afterCommand   method to be executed after calling the actual function
 * @return {Function}   actual wrapped function
 */
function wrapCommand(commandName, fn) {
    return function wrapCommandFn(...args) {
        /**
         * print error if a user is using a fiberized command outside of the Fibers context
         */
        if (!global._HAS_FIBER_CONTEXT && global.WDIO_WORKER) {
            log.warn(`Can't return command result of ${commandName} synchronously because command ` +
                'was executed outside of an it block, hook or step definition!');
        }
        /**
         * store element if Timer is running to reset `_NOT_FIBER` if timeout has occurred
         */
        if (timers.length > 0) {
            elements.add(this);
        }
        /**
         * Avoid running some functions in Future that are not in Fiber.
         */
        if (this._NOT_FIBER === true) {
            this._NOT_FIBER = isNotInFiber(this, fn.name);
            return fn.apply(this, args);
        }
        /**
         * all named nested functions run in parent Fiber context
         */
        this._NOT_FIBER = fn.name !== '';
        const future = new fibers_1.Future();
        const result = runCommandWithHooks.apply(this, [commandName, fn, ...args]);
        result.then(future.return.bind(future), future.throw.bind(future));
        try {
            const futureResult = future.wait();
            inFiber(this);
            return futureResult;
        }
        catch (e) {
            /**
             * in case some 3rd party lib rejects without bundling into an error
             */
            if (typeof e === 'string') {
                throw new Error(e);
            }
            /**
             * in case we run commands where no fiber function was used
             * e.g. when we call deleteSession
             */
            if (e.message.includes('Can\'t wait without a fiber')) {
                return result;
            }
            inFiber(this);
            throw e;
        }
    };
}
exports.default = wrapCommand;
/**
 * helper method that runs the command with before/afterCommand hook
 */
async function runCommandWithHooks(commandName, fn, ...args) {
    // save error for getting full stack in case of failure
    // should be before any async calls
    const stackError = new Error();
    await runCommandHook.call(this, 'beforeCommand', this.options.beforeCommand, [commandName, args]);
    let commandResult;
    let commandError;
    try {
        commandResult = await fn.apply(this, args);
    }
    catch (err) {
        commandError = utils_1.sanitizeErrorMessage(err, stackError);
    }
    await runCommandHook.call(this, 'afterCommand', this.options.afterCommand, [commandName, args, commandResult, commandError]);
    if (commandError) {
        throw commandError;
    }
    return commandResult;
}
async function runCommandHook(hookName, hookFn, args) {
    if (!inCommandHook) {
        inCommandHook = true;
        await executeHooksWithArgs_1.default(hookName, hookFn, args);
        inCommandHook = false;
    }
}
/**
 * isNotInFiber
 * if element or its parent has element id then we are in parent's Fiber
 * @param {object} context browser or element
 * @param {string} fnName function name
 */
function isNotInFiber(context, fnName) {
    return fnName !== '' && !!(context.elementId || (context.parent && context.parent.elementId));
}
/**
 * set `_NOT_FIBER` to `false` for element and its parents
 * @param {object} context browser or element
 */
function inFiber(context) {
    const multiRemoteContext = context;
    if (multiRemoteContext.constructor.name === 'MultiRemoteDriver') {
        return multiRemoteContext.instances.forEach(instance => {
            multiRemoteContext[instance]._NOT_FIBER = false;
            let parent = multiRemoteContext[instance].parent;
            while (parent && parent._NOT_FIBER) {
                parent._NOT_FIBER = false;
                parent = parent.parent;
            }
        });
    }
    context._NOT_FIBER = false;
    let parent = context.parent;
    while (parent && parent._NOT_FIBER) {
        parent._NOT_FIBER = false;
        parent = parent.parent;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcENvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvd3JhcENvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwREFBaUM7QUFJakMsa0ZBQXlEO0FBQ3pELG1DQUE4QztBQUM5QyxxQ0FBaUM7QUFFakMsTUFBTSxHQUFHLEdBQUcsZ0JBQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUVoQyxJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUE7QUFDekIsTUFBTSxNQUFNLEdBQVUsRUFBRSxDQUFBO0FBQ3hCLE1BQU0sUUFBUSxHQUEwQixJQUFJLEdBQUcsRUFBRSxDQUFBO0FBTWpEOztHQUVHO0FBQ0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtJQUNqQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDZixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0tBQ2pDO0lBQ0QsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUM3QixPQUFPLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxPQUFPLENBQUMsRUFBRTtZQUFDLENBQUM7S0FDdkM7SUFDRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDakIsUUFBUSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxBQUEzQiwwQkFBMEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ3hGO0lBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNyQixRQUFRLENBQUMsS0FBSyxFQUFFLENBQUE7S0FDbkI7QUFDTCxDQUFDLENBQUMsQ0FBQTtBQUVGOzs7Ozs7O0dBT0c7QUFDSCxTQUF3QixXQUFXLENBQUUsV0FBbUIsRUFB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