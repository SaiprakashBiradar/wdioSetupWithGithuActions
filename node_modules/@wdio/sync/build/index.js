"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runSync = exports.executeSync = exports.runFnInFiberContext = exports.wrapCommand = exports.executeHooksWithArgs = void 0;
const fibers_1 = __importDefault(require("./fibers"));
const executeHooksWithArgs_1 = __importDefault(require("./executeHooksWithArgs"));
exports.executeHooksWithArgs = executeHooksWithArgs_1.default;
const runFnInFiberContext_1 = __importDefault(require("./runFnInFiberContext"));
exports.runFnInFiberContext = runFnInFiberContext_1.default;
const wrapCommand_1 = __importDefault(require("./wrapCommand"));
exports.wrapCommand = wrapCommand_1.default;
const utils_1 = require("./utils");
const defaultRetries = { attempts: 0, limit: 0 };
/**
 * execute test or hook synchronously
 *
 * @param  {Function} fn         spec or hook method
 * @param  {Number}   retries    { limit: number, attempts: number }
 * @param  {Array}    args       arguments passed to hook
 * @return {Promise}             that gets resolved once test/hook is done or was retried enough
 */
async function executeSync(fn, retries = defaultRetries, args = []) {
    /**
     * User can also use the `@wdio/sync` package directly to run commands
     * synchronously in standalone mode. In this case we neither have
     * `global.browser` nor `this`
     */
    if (global.browser) {
        delete global.browser._NOT_FIBER;
    }
    if (this) {
        this.wdioRetries = retries.attempts;
    }
    try {
        global._HAS_FIBER_CONTEXT = true;
        let res = fn.apply(this, args);
        global._HAS_FIBER_CONTEXT = false;
        /**
         * sometimes function result is Promise,
         * we need to await result before proceeding
         */
        if (res instanceof Promise) {
            return await res;
        }
        return res;
    }
    catch (e) {
        if (retries.limit > retries.attempts) {
            retries.attempts++;
            return await executeSync.call(this, fn, retries, args);
        }
        /**
         * no need to modify stack if no stack available
         */
        if (!e.stack) {
            return Promise.reject(e);
        }
        e.stack = e.stack.split('\n').filter(utils_1.stackTraceFilter).join('\n');
        return Promise.reject(e);
    }
}
exports.executeSync = executeSync;
/**
 * run hook or spec via executeSync
 */
function runSync(fn, repeatTest, args = []) {
    return (resolve, reject) => fibers_1.default(() => executeSync.call(this, fn, repeatTest, args).then(resolve, reject)).run();
}
exports.runSync = runSync;
function sync(testFn) {
    return new Promise((resolve, reject) => {
        return runSync(testFn)(resolve, reject);
    });
}
exports.default = sync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0RBQTRCO0FBRzVCLGtGQUF5RDtBQTBFckQsK0JBMUVHLDhCQUFvQixDQTBFSDtBQXpFeEIsZ0ZBQXVEO0FBMkVuRCw4QkEzRUcsNkJBQW1CLENBMkVIO0FBMUV2QixnRUFBdUM7QUF5RW5DLHNCQXpFRyxxQkFBVyxDQXlFSDtBQXZFZixtQ0FBMEM7QUFDMUMsTUFBTSxjQUFjLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQTtBQU9oRDs7Ozs7OztHQU9HO0FBQ0gsS0FBSyxVQUFVLFdBQVcsQ0FBMEIsRUFBWSxFQUFFLE9BQU8sR0FBRyxjQUFjLEVBQUUsT0FBYyxFQUFFO0lBQ3hHOzs7O09BSUc7SUFDSCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDaEIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQTtLQUNuQztJQUNELElBQUksSUFBSSxFQUFFO1FBQ04sSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFBO0tBQ3RDO0lBRUQsSUFBSTtRQUNBLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUE7UUFDaEMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDOUIsTUFBTSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQTtRQUVqQzs7O1dBR0c7UUFDSCxJQUFJLEdBQUcsWUFBWSxPQUFPLEVBQUU7WUFDeEIsT0FBTyxNQUFNLEdBQUcsQ0FBQTtTQUNuQjtRQUVELE9BQU8sR0FBRyxDQUFBO0tBQ2I7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLElBQUksT0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ2xDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQTtZQUNsQixPQUFPLE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTtTQUN6RDtRQUVEOztXQUVHO1FBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDM0I7UUFFRCxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyx3QkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNqRSxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDM0I7QUFDTCxDQUFDO0FBY0csa0NBQVc7QUFaZjs7R0FFRztBQUNILFNBQVMsT0FBTyxDQUFhLEVBQVksRUFBRSxVQUFrQyxFQUFFLE9BQWMsRUFBRTtJQUMzRixPQUFPLENBQUMsT0FBNkIsRUFBRSxNQUE4QixFQUFFLEVBQUUsQ0FDckUsZ0JBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUM3RixDQUFDO0FBT0csMEJBQU87QUFHWCxTQUF3QixJQUFJLENBQUMsTUFBZ0I7SUFDekMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNuQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDM0MsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDO0FBSkQsdUJBSUMifQ==